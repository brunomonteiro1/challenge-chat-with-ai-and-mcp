version: '3.8'

services:
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # HTTP collector
      - "6832:6832/udp" # UDP agent
      - "14250:14250"   # gRPC collector
      - "4318:4318"     # OTLP HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - observability

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    entrypoint:
      - /bin/sh
      - -c
      - |
        cat > /etc/prometheus/prometheus.yml <<'EOF'
        global:
          scrape_interval: 15s
          evaluation_interval: 15s
        
        rule_files:
          # - "first_rules.yml"
          # - "second_rules.yml"
        
        scrape_configs:
          # Prometheus itself
          - job_name: 'prometheus'
            static_configs:
              - targets: ['localhost:9090']
        
          # Chat Backend Application
          - job_name: 'chat-backend'
            static_configs:
              - targets: ['172.17.0.1:4000']
            metrics_path: '/metrics'
            scrape_interval: 5s
            scrape_timeout: 3s
        EOF
        exec /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/etc/prometheus/console_libraries --web.console.templates=/etc/prometheus/consoles --storage.tsdb.retention.time=200h --web.enable-lifecycle
    networks:
      - observability

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - observability
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  observability:
    driver: bridge
